@using ecomFront.Models.SearchViewModels
@using ecomFront.Common

@{
    ViewData["Title"] = "Home Analisis";
    Layout = "_Layout";
}
@model HomeAnalisisViewModel
<!-- Page header -->
<div class="page-header page-header-light">
    <div class="page-header-content header-elements-lg-inline">
        <div class="header-elements d-none">
            <div class="d-flex justify-content-center">
                <a asp-area="" asp-controller="Pricing" asp-action="Home" asp-route-executionId="" class="btn btn-link btn-float font-size-sm font-weight-semibold text-body">
                    <i class="icon-coin-dollar icon-3x text-pink"></i>
                    <span>Precios</span>
                </a>
            </div>
        </div>
    </div>
</div>

<div class="page-header page-header-light">
    <div class="breadcrumb-line breadcrumb-line-light header-elements-lg-inline">
        <div class="d-flex">
            <div class="breadcrumb">
                <a asp-area="" asp-controller="Home" asp-action="Index" class="breadcrumb-item"><i class="icon-home2 mr-2"></i> Home</a>
                <a asp-area="" asp-controller="Search" asp-action="Searches" class="breadcrumb-item"> Busqueda</a>
                <span class="breadcrumb-item active">@Model.Search.Description</span>
            </div>
            <a href="#" class="header-elements-toggle text-body d-lg-none"><i class="icon-more"></i></a>
        </div>
        <div class="header-elements d-none">
            <div class="breadcrumb justify-content-center">
                <a href="#" class="breadcrumb-elements-item">
                    <i class="icon-comment-discussion mr-2"></i>
                    Necesito Ayuda
                </a>
            </div>
        </div>
    </div>
</div>
<!-- /page header -->
<div class="content">
    <div class="row">
        <div class="col-sm-6 col-xl-3">
            <!-- Donut with details -->
            <div class="card card-body text-center">
                <h6 class="font-weight-semibold mb-0 mt-1">Medio de Pago</h6>
                <div class="font-size-sm text-muted mb-3"># items</div>
                <div class="svg-center" id="groupingInfoPaymentMethod"></div>
            </div>
            <!-- /donut with details -->
        </div>
        <div class="col-sm-6 col-xl-3">
            <!-- Donut with details -->
            <div class="card card-body text-center">
                <h6 class="font-weight-semibold mb-0 mt-1">Forma de envio</h6>
                <div class="font-size-sm text-muted mb-3"># items</div>
                <div class="svg-center" id="groupingInfoShipping"></div>
            </div>
            <!-- /donut with details -->
        </div>
    </div>
</div>


@section Scripts
    {
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            _showGroupingInfoPaymentMethod();
            _showGroupingInfoShippingMethod();
        });

        var _showGroupingInfoPaymentMethod = function (element, size) {
            $.post('/Analisis/GetGroupingInfoPaymentMethod', { executionId: @Model.Execution.IdExecution })
                .done(function (data) {
                    var info = []
                    $.each(data, function (key, value) {
                        var itemInfo = {
                            status: value.clasification,
                            value: value.qtty,
                            color: colores[key]
                        };
                        info.push(itemInfo);
                    })

                    _donutWithDetails("#groupingInfoPaymentMethod", 146, info);
                })
                .fail(function (e) {
                    $.jGrowl(e.responseText, { theme: 'growl-error', header: ' ERROR ', life: 3000 });
                });
        }

        var _showGroupingInfoShippingMethod = function (element, size) {
            $.post('/Analisis/GetGroupingInfoShippingMethod', { executionId: @Model.Execution.IdExecution })
                .done(function (data) {
                    var info = []
                    $.each(data, function (key, value) {
                        var itemInfo = {
                            status: value.clasification,
                            value: value.qtty,
                            color: colores[key]
                        };
                        info.push(itemInfo);
                    })

                    _donutWithDetails("#groupingInfoShipping", 146, info);
                })
                .fail(function (e) {
                    $.jGrowl(e.responseText, { theme: 'growl-error', header: ' ERROR ', life: 3000 });
                });
        }

        // Donut with details
        var _donutWithDetails = function (element, size, data) {
                if (typeof d3 == 'undefined') {
                    console.warn('Warning - El grafico no esta cargado');
                    return;
                }

                // Initialize chart only if element exsists in the DOM
                if (element) {


                    // Basic setup
                    // ------------------------------

                    // Add data set


                    // Main variables
                    var d3Container = d3.select(element),
                        distance = 2, // reserve 2px space for mouseover arc moving
                        radius = (size / 2) - distance,
                        sum = d3.sum(data, function (d) { return d.value; });


                    // Tooltip
                    // ------------------------------

                    var tip = d3.tip()
                        .attr('class', 'd3-tip')
                        .offset([-10, 0])
                        .direction('e')
                        .html(function (d) {
                            return "<ul class='list-unstyled mb-1'>" +
                                "<li>" + "<div class='font-size-base my-1'>" + d.data.status + "</div>" + "</li>" +
                                "<li>" + "Total: &nbsp;" + "<span class='font-weight-semibold float-right'>" + d.value + "</span>" + "</li>" +
                                "<li>" + "Share: &nbsp;" + "<span class='font-weight-semibold float-right'>" + (100 / (sum / d.value)).toFixed(2) + "%" + "</span>" + "</li>" +
                                "</ul>";
                        });


                    // Create chart
                    // ------------------------------

                    // Add svg element
                    var container = d3Container.append("svg").call(tip);

                    // Add SVG group
                    var svg = container
                        .attr("width", size)
                        .attr("height", size)
                        .append("g")
                        .attr("transform", "translate(" + (size / 2) + "," + (size / 2) + ")");


                    // Construct chart layout
                    // ------------------------------

                    // Pie
                    var pie = d3.layout.pie()
                        .sort(null)
                        .startAngle(Math.PI)
                        .endAngle(3 * Math.PI)
                        .value(function (d) {
                            return d.value;
                        });

                    // Arc
                    var arc = d3.svg.arc()
                        .outerRadius(radius)
                        .innerRadius(radius / 1.35);


                    //
                    // Append chart elements
                    //

                    // Group chart elements
                    var arcGroup = svg.selectAll(".d3-arc")
                        .data(pie(data))
                        .enter()
                        .append("g")
                        .attr("class", "d3-arc d3-slice-border")
                        .style({
                            'cursor': 'pointer'
                        });

                    // Append path
                    var arcPath = arcGroup
                        .append("path")
                        .style("fill", function (d) {
                            return d.data.color;
                        });


                    //
                    // Add interactions
                    //

                    // Mouse
                    arcPath
                        .on('mouseover', function (d, i) {

                            // Transition on mouseover
                            d3.select(this)
                                .transition()
                                .duration(500)
                                .ease('elastic')
                                .attr('transform', function (d) {
                                    d.midAngle = ((d.endAngle - d.startAngle) / 2) + d.startAngle;
                                    var x = Math.sin(d.midAngle) * distance;
                                    var y = -Math.cos(d.midAngle) * distance;
                                    return 'translate(' + x + ',' + y + ')';
                                });

                            $(element + ' [data-slice]').css({
                                'opacity': 0.3,
                                'transition': 'all ease-in-out 0.15s'
                            });
                            $(element + ' [data-slice=' + i + ']').css({ 'opacity': 1 });
                        })
                        .on('mouseout', function (d, i) {

                            // Mouseout transition
                            d3.select(this)
                                .transition()
                                .duration(500)
                                .ease('bounce')
                                .attr('transform', 'translate(0,0)');

                            $(element + ' [data-slice]').css('opacity', 1);
                        });

                    // Animate chart on load
                    arcPath
                        .transition()
                        .delay(function (d, i) {
                            return i * 500;
                        })
                        .duration(500)
                        .attrTween("d", function (d) {
                            var interpolate = d3.interpolate(d.startAngle, d.endAngle);
                            return function (t) {
                                d.endAngle = interpolate(t);
                                return arc(d);
                            };
                        });


                    //
                    // Add text
                    //

                    // Total
                    svg.append('text')
                        .attr({
                            'class': 'half-donut-total d3-text opacity-50',
                            'text-anchor': 'middle',
                            'dy': -13
                        })
                        .text('Total');

                    // Count
                    svg
                        .append('text')
                        .attr('class', 'half-donut-count d3-text')
                        .attr('text-anchor', 'middle')
                        .attr('dy', 14)
                        .style({
                            'font-size': '21px',
                            'font-weight': 500
                        });

                    // Animate count
                    svg.select('.half-donut-count')
                        .transition()
                        .duration(1500)
                        .ease('linear')
                        .tween("text", function (d) {
                            var i = d3.interpolate(this.textContent, sum);

                            return function (t) {
                                this.textContent = d3.format(",d")(Math.round(i(t)));
                            };
                        });


                    //
                    // Add legend
                    //

                    // Append list
                    var legend = d3.select(element)
                        .append('ul')
                        .attr('class', 'chart-widget-legend')
                        .selectAll('li')
                        .data(pie(data))
                        .enter()
                        .append('li')
                        .attr('data-slice', function (d, i) {
                            return i;
                        })
                        .attr('style', function (d, i) {
                            return 'border-bottom: solid 3px ' + d.data.color;
                        })
                        .text(function (d, i) {
                            return d.data.status + ': ';
                        });

                    // Append text
                    legend.append('span')
                        .text(function (d, i) {
                            return d.data.value;
                        });
                }
            };

    </script>
}